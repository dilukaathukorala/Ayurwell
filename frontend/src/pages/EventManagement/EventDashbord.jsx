import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { MdOutlineAddBox } from "react-icons/md";
import EventTable from "../../components/home/EventTable";
import Spinner from "../../components/spinner"; 
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import logo from '../../images/logo.png';
import Header from "../../components/headerfooter/Header";
import Footer from "../../components/headerfooter/Footer";


const EventDashbord = () => {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showType, setShowType] = useState("table");
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState(""); // State for search term
  const navigate = useNavigate();

  useEffect(() => {
    const fetchEvents = async () => {
      setLoading(true);
      try {
        const response = await axios.get("http://localhost:5555/events");
        const fetchedEvents = response.data.data;

        if (Array.isArray(fetchedEvents)) {
          setEvents(fetchedEvents);
        } else {
          throw new Error("Events data is not an array");
        }
      } catch (error) {
        console.error(error);
        setError("Failed to fetch events. Please try again later.");
      } finally {
        setLoading(false);
      }
    };

    fetchEvents();
  }, []);

  // Generate PDF report

  const generatePDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(24);
    doc.setFont("Poppins", "bold");
    doc.text("CraftMart", 14, 22);
    doc.setFontSize(18);
    doc.setFont("Poppins", "bold");
    doc.text("Events Report", 14, 32);
    
    const logoWidth = 45; // Adjust width as needed
    const logoHeight = 30; // Adjust height as needed
    doc.addImage(logo, 'PNG', 160, 10, logoWidth, logoHeight); // Add logo to the right side

    const reportDate = new Date().toLocaleDateString();
    doc.setFontSize(12);
    doc.setFont("Poppins", "normal");
    doc.text(`Date: ${reportDate}`, 14, 42);

    doc.setDrawColor(0, 0, 0);
    doc.setLineWidth(1);
    doc.line(10, 45, 205, 45);

    const tableColumn = ["No", "Event Title", "Date", "Time", "Category"];
    const tableRows = events.map((event, index) => [
      `EID_${index + 1}`,
      event.title,
      event.date,
      event.time,
      event.category,
    ]);

    doc.autoTable(tableColumn, tableRows, {
      startY: 50,
      theme: "grid",
      headStyles: {
        fillColor: "#330D0F",
        textColor: "#FFFFFF",
        font: "Poppins",
        fontSize: 8,
        halign: "center",
      },
      bodyStyles: {
        font: "Poppins",
        fontSize: 10,
        valign: "top",
        overflow: "linebreak",
        cellPadding: 1,
        cellWidth: "wrap",
      },
      margin: { left: 30, right: 40 },
      columnStyles: {
        0: { cellWidth: 15, halign: "center" },
        1: { cellWidth: 50, halign: "left" },
        2: { cellWidth: 30, halign: "center" },
        3: { cellWidth: 20, halign: "center" },
        4: { cellWidth: 30, halign: "left" },
      },
      styles: {
        cellPadding: 1,
        font: "Poppins",
      },
      didDrawPage: function (data) {
        doc.setFontSize(10);
        doc.text("Generated by Craftmart", 14, doc.internal.pageSize.height - 10);
      },
    });

    doc.save("Event_Report.pdf");
  };
  // Filtered events based on search term
  const filteredEvents = events.filter(event =>
    event.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div>
      <Header />
    <div
      style={{
        padding: "2rem",
        fontFamily: "'Poppins', sans-serif",
        backgroundColor: "#FFFFFF",
        minHeight: "100vh",
      }}
    >
     
      <div style={{ display: "flex", justifyContent: "space-between", marginBottom: "1rem" }}>
        <input
          type="text"
          placeholder="Search events..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          style={{
            padding: "0.5rem",
            borderRadius: "0.5rem",  
            border: "1px solid #E2E2E2",
            backgroundColor: "#FFFFFF", 
            color: "#330D0F", 
            flex: "0 1 30%",
            marginLeft: "55rem",
          }}
        />
        <button
          style={{
            backgroundColor: "#330D0F",
            color: "#FFFFFF",
            padding: "0.5rem 1rem",
            border: "none",
            borderRadius: "0.5rem",
            cursor: "pointer",
          }}
          onClick={() => navigate("/events/create")} // Navigate to the Add Event page
        >
          <MdOutlineAddBox style={{ marginRight: "0.5rem" }} />
          Add Event
        </button>
      </div>

      <div
        style={{
          display: "flex",
          justifyContent: "center",
          gap: "1rem",
          marginBottom: "1rem",
        }}
      >
        <button
          style={{
            backgroundColor: "#E2E2E2",
            border: "none",
            padding: "0.5rem 1rem",
            borderRadius: "0.5rem",
            cursor: "pointer",
            transition: "background-color 0.3s ease",
          }}
          onClick={() => setShowType("table")}
        >
          Table
        </button>
        <button
          style={{
            backgroundColor: "#E2E2E2",
            border: "none",
            padding: "0.5rem 1rem",
            borderRadius: "0.5rem",
            cursor: "pointer",
            transition: "background-color 0.3s ease",
          }}
          onClick={() => navigate("/events/card")}
        >
          Card
        </button>
        <button
          style={{
            backgroundColor: "#330D0F",
            color: "#FFFFFF",
            padding: "0.5rem 1rem",
            border: "none",
            borderRadius: "0.5rem",
            cursor: "pointer",
          }}
          onClick={generatePDF}
        >
          Download Event Report
        </button>
      </div>

      {loading ? (
        <Spinner />
      ) : error ? (
        <p>{error}</p>
      ) : (
        <EventTable events={filteredEvents} />
      )}
      
    </div>
    <Footer />
    </div>
  );
};

export default EventDashbord;
